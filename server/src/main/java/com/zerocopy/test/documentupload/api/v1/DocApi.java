/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zerocopy.test.documentupload.api.v1;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Generated;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-08T22:23:18.985393663+02:00[Europe/Madrid]")
@Validated
@Tag(name = "doc", description = "the doc API")
public interface DocApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /doc/list : List all uploaded documents and their page counts
     *
     * @return List of documents and page counts (status code 200)
     *         or Internal server error. Failed to retrieve document list. (status code 500)
     */
    @Operation(
        operationId = "docListGet",
        summary = "List all uploaded documents and their page counts",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of documents and page counts"),
            @ApiResponse(responseCode = "500", description = "Internal server error. Failed to retrieve document list.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/doc/list",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> docListGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /doc/upload : Upload a PDF document
     *
     * @param file  (optional)
     * @return Document uploaded successfully (status code 201)
     *         or Bad request. Invalid file format. (status code 400)
     *         or Internal server error. Failed to upload. (status code 500)
     */
    @Operation(
        operationId = "docUploadPost",
        summary = "Upload a PDF document",
        responses = {
            @ApiResponse(responseCode = "201", description = "Document uploaded successfully"),
            @ApiResponse(responseCode = "400", description = "Bad request. Invalid file format.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error. Failed to upload.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/doc/upload",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<Void> docUploadPost(
        @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
